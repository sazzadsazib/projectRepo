/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>C:/Users/sazib/Downloads/assignment 4/lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\0\1\30\1\30\1\30\22\0\1\0\5\0\1\23"+
    "\1\0\1\26\1\26\1\17\1\17\1\26\1\17\1\25\1\17\12\24"+
    "\1\0\1\26\1\21\1\20\1\21\2\0\22\27\1\12\7\27\1\26"+
    "\1\0\1\26\3\0\1\7\3\27\1\10\1\4\1\14\1\16\1\1"+
    "\2\27\1\5\1\27\1\2\1\6\2\27\1\13\1\11\1\3\2\27"+
    "\1\15\3\27\1\26\1\22\1\26\7\0\1\30\u1fa2\0\1\30\1\30"+
    "\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\2\2\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\2\1\10\5\2\1\4\1\0\4\2\1\5"+
    "\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[32];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


